/* ELEMENTS FORM */

::placeholder {
  opacity: var(--o-4);
}

/* Remove built-in form typography styles */
input,
button,
textarea,
select {
  font: inherit;
}

button {
}

datalist {
}

fieldset {
  border: 1px solid var(--border-color);
  border-radius: var(--radius-lg);
  padding: var(--sm3);

  ul:has([type="checkbox"], [type="radio"]) {
    padding-left: 0;
  }

  > [aria-hidden] {
    /* legend replacement  */
    margin-bottom: var(--sm3);
    font-size: var(--text-lg);
    grid-column: 1 / -1;
  }
}

form {
  :where(p, ul):not(:last-child) {
    margin-bottom: var(--sm2);
  }
  :where(button, .button, .bt, input):has(+ :is(button, .button, .bt, input)) {
    margin-right: var(--sm1);
  }
}

input {
  &:where(:not([type="checkbox"], [type="radio"])) {
    height: var(--input-height);
  }
  &:where(
      :not([type="color"], [type="file"], [type="reset"], [type="submit"])
    ) {
    padding: var(--input-padding);
  }
  &:where(:not([type="color"])) {
    border-radius: var(--input-border-radius);
  }
  &:where(:not([type="file"])) {
    border: 1px solid var(--border-color);
  }
  &[type="number"] {
    padding-right: var(--xs1);
  }
}

label {
  display: block;
  &:has(+ :is(input, select, textarea)) {
    margin-bottom: var(--xs1);
  }
}

legend {
  /*  Visually hidden  */
  /* replaced by fieldset > [aria-hidden] above */
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  width: 1px;
  height: 1px;
  white-space: nowrap;
}

meter {
  width: 100%;
  background: var(--primary-100);
  border-radius: var(--radius-md);
  height: var(--sm1);
  /* webkit */
  &::-webkit-meter-bar {
    background: var(--primary-100);
  }
  &::-webkit-meter-bar,
  &::-webkit-meter-optimum-value,
  &::-webkit-meter-suboptimum-value,
  &::-webkit-meter-even-less-good-value {
    height: var(--sm1);
    border: none;
    border-radius: var(--radius-md);
  }
  &::-webkit-meter-even-less-good-value {
    background: var(--no-400);
  }
  &::-webkit-meter-suboptimum-value {
    background: var(--maybe-400);
  }
  &::-webkit-meter-optimum-value {
    background: var(--yes-400);
  }
  /* mozilla */
  &:-moz-meter-sub-sub-optimum::-moz-meter-bar {
    background: var(--no-400);
  }
  &:-moz-meter-sub-optimum::-moz-meter-bar {
    background: var(--maybe-400);
  }
  &:-moz-meter-optimum::-moz-meter-bar {
    background: var(--yes-400);
  }
}

optgroup {
}

option {
}

output {
}

progress {
  --progress-height: var(--sm1);
  --progress-color: var(--primary-500);
  --progress-track-color: var(--primary-100);
  --progress-radius: var(--radius-md);
  appearance: none;
  width: 100%;
  /* mozilla */
  height: var(--progress-height);
  background: var(--progress-track-color);
  border-radius: var(--progress-radius);
  border: none;
  &::-moz-progress-bar {
    background: var(--progress-color);
    border-radius: var(--progress-radius);
  }
  /* webkit */
  &::-webkit-progress-bar {
    width: 100%;
    background: var(--progress-track-color);
    border-radius: var(--progress-radius);
    height: var(--progress-height);
  }
  &::-webkit-progress-value {
    background: var(--progress-color);
    border-radius: var(--progress-radius);
  }
}

select {
  --arrowSize: calc((var(--input-height) / 4.5));
  --arrowY: calc((var(--input-height) / 2) - (var(--arrowSize) / 2));
  --arrowColor: var(--base-900);

  display: block;
  appearance: none;
  height: var(--input-height);
  padding: var(--xs1) calc(var(--input-padding) + var(--md1)) var(--xs1)
    var(--input-padding);
  border: 1px solid var(--border-color);
  border-radius: var(--input-border-radius);
  /* maybe I should just include a SVG ðŸ˜… */
  background: linear-gradient(45deg, transparent 50%, var(--arrowColor) 50%),
    linear-gradient(135deg, var(--arrowColor) 50%, transparent 50%),
    linear-gradient(var(--base-0), var(--base-100));
  background-position: calc(100% - var(--arrowSize) - var(--input-padding))
      var(--arrowY),
    calc(100% - var(--input-padding)) var(--arrowY), bottom left;
  background-size: var(--arrowSize) var(--arrowSize),
    var(--arrowSize) var(--arrowSize), 100% var(--input-height);
  background-repeat: no-repeat;
  &::focus-visible {
    outline: none;
  }
  &:disabled {
    cursor: not-allowed;
    --arrowColor: var(--base-200);
  }

  &[multiple] {
    height: auto;
    padding: var(--input-padding);
    background: var(--base-0);
  }
}

textarea {
  border-radius: var(--input-border-radius);
  border: 1px solid var(--border-color);
  resize: block;
  &:not([rows]) {
    min-height: 6em;
  }
}
