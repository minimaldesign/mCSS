---
import type { HTMLAttributes } from 'astro/types';
import { Image } from 'astro:assets';

interface Media {
  type: 'image' | 'video' | 'gradient';
  src: string;
  alt?: string;
  poster?: string;
}

interface SlideshowItem {
  media?: Media;
  content?: string; // HTML string for slide content
}

interface Props extends HTMLAttributes<'section'> {
  id?: string;
  variant?: 'split' | 'full' | 'slideshow';
  ratio?: string;
  direction?: 'left' | 'right';
  contentFirst?: boolean;
  media?: Media;
  animation?: 'fade' | 'slide' | 'none';
  parallax?: boolean;
  height?: number; // 0-100, min-height in vh
  overlayOpacity?: number;
  overlayColor?: string;
  textColor?: string;
  slideshowItems?: SlideshowItem[];
  slideshowAutoplay?: boolean;
  slideshowInterval?: number;
  slideshowTransitionSpeed?: number; // ms
  extraClass?: string;
}

// prettier-ignore
const {
  id = 'hero',
  variant = 'full',
  ratio = '60/40',
  direction = 'left',
  contentFirst = true,
  media = {},
  animation = 'none',
  parallax = false,
  height,
  overlayOpacity = 0,
  overlayColor = '--base-950',
  textColor = '--text-color',
  slideshowItems = [],
  slideshowAutoplay = false,
  slideshowInterval = 5000,
  slideshowTransitionSpeed = 600,
  extraClass = '',
  ...rest
} = Astro.props as Props;

const getGridStyle = () => {
  if (variant === 'split') {
    const [left, right] = ratio.split('/').map(Number);
    return direction === 'left' ? `grid-template-columns: ${left}fr ${right}fr;` : `grid-template-columns: ${right}fr ${left}fr;`;
  }
  return '';
};

const getMinHeightStyle = () => {
  if (typeof height === 'number' && height > 0 && height <= 100) {
    return `min-height: ${height}vh;`;
  }
  return '';
};
---

<section id={id} class:list={[`hero hero-${variant}`, extraClass]} style={getGridStyle()} {...rest}>
  {
    variant === 'full' && (
      <div class:list={['hero_wrap']} style={getMinHeightStyle()}>
        {media.type === 'image' && <Image class="hero_bg" src={media.src} alt={media.alt} loading="lazy" style={parallax ? 'will-change: transform;' : ''} />}
        {media.type === 'video' && <video class="hero_bg" src={media.src} poster={media.poster} alt={media.alt} autoPlay muted loop playsInline loading="lazy" />}
        {media.type === 'gradient' && <div class="hero_bg hero_gradient" style={`background: ${media.src};`} />}
        {overlayOpacity > 0 && <div class="hero_overlay" style={`opacity: ${overlayOpacity}; background: var(${overlayColor});`} />}
        <div class="hero_content" style={`color: var(${textColor});`}>
          <slot />
        </div>
      </div>
    )
  }
  {
    variant === 'split' && (
      <>
        {((direction === 'left' && contentFirst) || (direction === 'right' && !contentFirst)) && (
          <div class="hero_content" style={`color: var(${textColor});`}>
            <slot />
          </div>
        )}
        <div class="hero_media">
          {media.type === 'image' && <Image src={media.src} alt={media.alt} loading="lazy" />}
          {media.type === 'video' && <video src={media.src} poster={media.poster} alt={media.alt} controls loading="lazy" />}
        </div>
        {((direction === 'right' && contentFirst) || (direction === 'left' && !contentFirst)) && (
          <div class="hero_content" style={`color: var(${textColor});`}>
            <slot />
          </div>
        )}
      </>
    )
  }
  {
    variant === 'slideshow' && (
      <div class:list={['hero_wrap', 'hero_slideshow', { 'hero_wrap-fullHeight': height === 'full' }]} data-slideshow length={slideshowItems.length}>
        {/* Render all media elements, only the active one is visible */}
        {slideshowItems.map((item, idx) => item?.media && item.media.type === 'image' && <Image class={`hero_bg hero_slideshow_media${idx === 0 ? ' is-active' : ''}`} src={item.media.src} alt={item.media.alt} loading="lazy" data-slideshow-media={idx} />)}
        {slideshowItems.map((item, idx) => item?.media && item.media.type === 'video' && <video class={`hero_bg hero_slideshow_media${idx === 0 ? ' is-active' : ''}`} src={item.media.src} poster={item.media.poster} alt={item.media.alt} autoPlay muted loop playsInline loading="lazy" data-slideshow-media={idx} />)}
        {slideshowItems.map((item, idx) => item?.media && item.media.type === 'gradient' && <div class={`hero_bg hero_gradient hero_slideshow_media${idx === 0 ? ' is-active' : ''}`} style={`background: ${item.media.src};`} data-slideshow-media={idx} />)}
        {overlayOpacity > 0 && <div class="hero_overlay" style={`opacity: ${overlayOpacity}; background: var(${overlayColor});`} />}
        <div class="hero_content" style={`color: var(${textColor});`}>
          <slot />
        </div>
        <div class="hero_pagination">
          {slideshowItems.map((_, idx) => (
            <button class={`hero_pagination_dot${idx === 0 ? ' is-active' : ''}`} aria-label={`Go to slide ${idx + 1}`} data-hero_pagination_dot={idx} type="button" />
          ))}
        </div>
      </div>
    )
  }
</section>

{/* Only include split ratio validation for split variant in dev */}
{import.meta.env.DEV && variant === 'split' && (
  <script type="module" define:vars={{ id, ratio }}>
    function isValidRatio(ratio) {
      const match = ratio && ratio.match(/^([1-9][0-9]?)\/([1-9][0-9]?)$/);
      if (!match) return false;
      const left = Number(match[1]);
      const right = Number(match[2]);
      return left + right === 100;
    }
    if (!isValidRatio(ratio)) {
      const section = document.getElementById(id);
      if (section) {
        const error = document.createElement('div');
        error.className = 'dev-error';
        error.innerHTML = `<strong>Hero error:</strong> the ratio (<code>${ratio}</code>) is invalid. Its total should be 100, i.e., <code>60/40</code>, <code>30/70</code>, <code>62/38</code>, etc.`;
        section.prepend(error);
      }
    }
  </script>
)}

{/* Only include parallax JS for full variant with parallax enabled */}
{variant === 'full' && parallax && (
  <script type="module" define:vars={{ id }}>
    const full = document.querySelector(`#${id}.hero-full, #${id}.hero_wrap`);
    if (full) {
      const bg = full.querySelector('.hero_bg');
      if (bg) {
        const onScroll = () => {
          const rect = full.getBoundingClientRect();
          const offset = Math.max(0, 0 - rect.top) * 0.3;
          bg.style.transform = `translateY(${offset}px)`;
        };
        window.addEventListener('scroll', onScroll);
        window.addEventListener('resize', onScroll);
        window.addEventListener('astro:before-swap', () => {
          window.removeEventListener('scroll', onScroll);
          window.removeEventListener('resize', onScroll);
        });
        onScroll();
      }
    }
  </script>
)}

{/* Only include slideshow JS for slideshow variant */}
{variant === 'slideshow' && (
  <script type="module" define:vars={{ id, slideshowAutoplay, slideshowInterval, slideshowTransitionSpeed, slideshowItems }}>
    const root = document.querySelector(`#${id} .hero_slideshow`);
    if (root) {
      let active = 0;
      const dots = root.querySelectorAll('[data-hero_pagination_dot]');
      const mediaEls = root.querySelectorAll('.hero_slideshow_media');
      const ul = root.querySelector('.hero_content ul');
      const lis = ul ? Array.from(ul.children) : [];
      let autoplayIntervalId = null;
      const show = (idx) => {
        mediaEls.forEach((el, i) => {
          el.classList.toggle('is-active', i === idx);
        });
        lis.forEach((li, i) => {
          li.classList.toggle('is-active', i === idx);
        });
        dots.forEach((el, i) => {
          el.classList.toggle('is-active', i === idx);
        });
        active = idx;
      };
      const stopAutoplay = () => {
        if (autoplayIntervalId) {
          clearInterval(autoplayIntervalId);
          autoplayIntervalId = null;
        }
      };
      dots.forEach((dot, idx) => {
        dot.addEventListener('click', () => {
          show(idx);
          stopAutoplay();
        });
      });
      if (slideshowAutoplay) {
        autoplayIntervalId = setInterval(() => {
          show((active + 1) % slideshowItems.length);
        }, slideshowInterval);
      }
      show(0);
    }
  </script>
)}
