---
import arrow from '../assets/icons/arrow-right-small.svg?raw';

const { selector = 'main', headings = ['h2', 'h3'], baseUrl = '', scrollOffset = 0 } = Astro.props;
---

<nav id="toc-root" class="toc" data-selector={selector} data-headings={JSON.stringify(headings)} data-base-url={baseUrl} data-scroll-offset={scrollOffset} data-arrow={encodeURIComponent(arrow)}></nav>

<script type="module">
  const tocRoot = document.getElementById('toc-root');
  const selector = tocRoot.dataset.selector;
  const headingsTags = JSON.parse(tocRoot.dataset.headings);
  const baseUrl = tocRoot.dataset.baseUrl;
  const scrollOffset = parseInt(tocRoot.dataset.scrollOffset, 10) || 0;
  const arrow = decodeURIComponent(tocRoot.dataset.arrow);

  function buildTocTree(headings) {
    const root = [];
    const stack = [{ level: 0, children: root }];

    headings.forEach((heading) => {
      const level = parseInt(heading.tagName[1], 10);
      const item = {
        id: heading.id,
        text: heading.textContent,
        level,
        children: [],
      };

      while (stack.length && stack[stack.length - 1].level >= level) {
        stack.pop();
      }
      stack[stack.length - 1].children.push(item);
      stack.push(item);
    });

    return root;
  }

  function renderToc(items) {
    if (!items.length) return '';
    return `<ul>${items
      .map(
        (item) =>
          `<li>
            <a href="${baseUrl ? baseUrl + '#' + item.id : '#' + item.id}" data-toc-link="${item.id}">
            ${arrow} <span>${item.text}</span></a>
            ${renderToc(item.children)}
          </li>`
      )
      .join('')}</ul>`;
  }

  function setupToc() {
    const container = document.querySelector(selector);
    if (!container) return;

    const headings = Array.from(container.querySelectorAll(headingsTags.join(','))).filter((el) => el.id);

    const tocTree = buildTocTree(headings);
    const tocRoot = document.getElementById('toc-root');
    tocRoot.innerHTML = renderToc(tocTree);

    function updateActiveLink() {
      const hash = decodeURIComponent(window.location.hash);
      tocRoot.querySelectorAll('a[data-toc-link]').forEach((link) => {
        const href = link.getAttribute('href');
        if (hash && (href === hash || href.endsWith(hash))) {
          link.classList.add('is-active');
        } else {
          link.classList.remove('is-active');
        }
      });
    }

    tocRoot.querySelectorAll('a[data-toc-link]').forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('data-toc-link');
        const target = document.getElementById(targetId);
        if (target) {
          const rect = target.getBoundingClientRect();
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          const top = rect.top + scrollTop - scrollOffset;
          window.scrollTo({ top, behavior: 'smooth' });
          history.pushState(null, '', link.getAttribute('href'));
          updateActiveLink();
        }
      });
    });

    window.addEventListener('hashchange', updateActiveLink);
    updateActiveLink();
  }

  if (document.readyState !== 'loading') {
    setupToc();
  } else {
    window.addEventListener('DOMContentLoaded', setupToc);
  }
</script>
