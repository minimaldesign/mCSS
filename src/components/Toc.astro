---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'nav'> {
  id?: string;
  selector?: string;
  headings?: string[];
  baseUrl?: string;
  scrollOffset?: number;
  description?: string;
  icon?: string;
  'data-testid'?: string;
  extraClass?: string;
}

// prettier-ignore
const {
  id = 'toc',
  selector = 'main',
  headings = ['h2', 'h3'],
  baseUrl = '',
  scrollOffset = 0,
  description,
  icon = '',
  extraClass,
  'data-testid': testId = 'toc',
  ...rest
} = Astro.props as Props;
---

<!-- prettier-ignore -->
<nav
  id={id}
  class:list={[
    'toc',
    {
      'toc-icon': icon,
    },
    extraClass,
  ]}
  aria-label={description}
  data-testid={testId}
  {...rest}
></nav>

<script type="module" define:vars={{ id, selector, headings, baseUrl, scrollOffset, description, icon }}>
  const tocRoot = document.getElementById(id);

  let suppressObserver = false;
  let scrollTimeout;
  let tocObserver = null;
  let tocScrollHandler = null;

  function buildTocTree(headings) {
    const root = [];
    const stack = [{ level: 0, children: root }];

    headings.forEach((heading) => {
      const level = parseInt(heading.tagName[1], 10);
      const item = {
        id: heading.id,
        text: heading.textContent,
        level,
        children: [],
      };

      while (stack.length && stack[stack.length - 1].level >= level) {
        stack.pop();
      }
      stack[stack.length - 1].children.push(item);
      stack.push(item);
    });

    return root;
  }

  function renderToc(items, isTopLevel = false) {
    if (!items.length) return '';
    let html = '';
    if (isTopLevel && description) {
      html += `<p><strong>${description}</strong></p>`;
    }
    html += `<ul>${items
      .map(
        (item) =>
          `<li>
            <a href="${baseUrl ? baseUrl + '#' + item.id : '#' + item.id}" data-toc-link="${item.id}">
            ${icon} <span>${item.text}</span></a>
            ${renderToc(item.children)}
          </li>`
      )
      .join('')}</ul>`;
    return html;
  }

  function setupToc() {
    const container = document.querySelector(selector);
    if (!container) return;

    const headingsEls = Array.from(container.querySelectorAll(headings.join(','))).filter((el) => el.id);

    tocRoot.innerHTML = renderToc(buildTocTree(headingsEls), true);

    function updateActiveLink() {
      const hash = decodeURIComponent(window.location.hash);
      tocRoot.querySelectorAll('a[data-toc-link]').forEach((link) => {
        const href = link.getAttribute('href');
        if (hash && href === hash) {
          link.classList.add('is-active');
          link.setAttribute('aria-current', 'true');
        } else {
          link.classList.remove('is-active');
          link.removeAttribute('aria-current');
        }
      });
    }

    // Clean up previous event listeners if any
    if (tocScrollHandler) window.removeEventListener('scroll', tocScrollHandler);
    if (tocObserver) {
      tocObserver.disconnect();
    }

    tocRoot.querySelectorAll('a[data-toc-link]').forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('data-toc-link');
        const target = document.getElementById(targetId);
        if (target) {
          suppressObserver = true;
          const rect = target.getBoundingClientRect();
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          const top = rect.top + scrollTop - scrollOffset;
          window.scrollTo({ top, behavior: 'smooth' });
          history.pushState(null, '', link.getAttribute('href'));
          updateActiveLink();

          // Debounced scroll event to re-enable observer
          tocScrollHandler = () => {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
              suppressObserver = false;
              window.removeEventListener('scroll', tocScrollHandler);
            }, 150);
          };
          window.addEventListener('scroll', tocScrollHandler);
        }
      });
    });

    window.addEventListener('hashchange', updateActiveLink);
    updateActiveLink();

    // Intersection Observer to update URL and active link on scroll
    const headingElements = headingsEls.map((h) => document.getElementById(h.id)).filter(Boolean);

    if ('IntersectionObserver' in window && headingElements.length) {
      let ticking = false;
      tocObserver = new IntersectionObserver(
        (entries) => {
          if (suppressObserver) return;
          if (!ticking) {
            window.requestAnimationFrame(() => {
              const visible = entries.filter((entry) => entry.isIntersecting).sort((a, b) => a.target.offsetTop - b.target.offsetTop)[0];
              if (visible) {
                const id = visible.target.id;
                if (window.location.hash !== '#' + id) {
                  history.replaceState(null, '', '#' + id);
                  updateActiveLink();
                }
              }
              ticking = false;
            });
            ticking = true;
          }
        },
        {
          rootMargin: `-${scrollOffset}px 0px 0px 0px`,
          threshold: 1,
        }
      );
      headingElements.forEach((el) => tocObserver.observe(el));
    }
  }

  if (document.readyState !== 'loading') {
    setupToc();
  } else {
    window.addEventListener('DOMContentLoaded', setupToc);
  }
</script>
